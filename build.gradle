plugins {
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'com.adarshr.test-logger' version '2.0.0'
    id "com.diffplug.gradle.spotless" version '3.25.0'
    id 'io.codearte.nexus-staging' version '0.21.1'
    id "de.marcphilipp.nexus-publish" version '0.4.0'
    id 'org.unbroken-dome.test-sets' version '2.1.1'
    id 'org.jetbrains.kotlin.jvm' version '1.3.60'
    id "de.undercouch.download" version '4.0.0'
    id "com.jfrog.bintray" version '1.8.4'
}

apply from: "$rootDir/gradle/repositories/build.gradle"

repositories {
    maven {
        url "$rootProject.projectDir/lib"
    }
}

description 'Integrates web3j with the Aion Network blockchain.'

ext {
    loadPropsFromFile = { String path ->
        def props = new Properties()
        def propsFile = file(path)
        if (propsFile.exists()) {
            propsFile.withReader { reader ->
                props.load(reader)
            }
        }
        props
    }
    versions = loadPropsFromFile("$rootDir/versions.properties")
}

subprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.unbroken-dome.test-sets'
    apply plugin: 'de.undercouch.download'

    repositories {
        maven {
            url "$rootProject.projectDir/lib"
        }
    }

    apply {
        [
                'bintray',
                'jacoco',
                'java',
                'javadoc',
                'repositories',
                'publish',
                'spotless',
        ].each { buildScript ->
            download {
                src "https://raw.githubusercontent.com/web3j/build-tools/master/gradle/$buildScript/build.gradle"
                dest "$rootDir/gradle/$buildScript/build.gradle"
                overwrite true
                quiet true
                onlyIfModified true
            }
            from("$rootDir/gradle/$buildScript/build.gradle")
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifactId = "${rootProject.name}-$project.name"
            }
        }
    }

    testSets {
        integrationTest {
            dirName = 'integration-test'
        }
    }

    tasks.withType(Test) {
        useJUnitPlatform()
        systemProperties = [
                'junit.jupiter.extensions.autodetection.enabled': 'true',
                'junit.jupiter.testinstance.lifecycle.default'  : 'per_class'
        ]
    }

    configurations {
        testOutput.extendsFrom(testCompile)
        integrationTestOutput.extendsFrom(integrationTestCompile)
    }

    testlogger {
        showStandardStreams true
    }

    dependencies {
        api "org.bouncycastle:bcpkix-jdk15on:${versions.bouncycastle}"

        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        implementation 'org.jetbrains.kotlin:kotlin-reflect'
        implementation 'org.jetbrains.kotlin:kotlin-noarg'
        implementation 'org.jetbrains.kotlin:kotlin-native-utils'

        implementation "io.github.microutils:kotlin-logging:${versions.kLogging}"

        testImplementation(group: 'org.web3j', name: 'core', version: version, classifier: 'tests')
        testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.junit5}"
        testImplementation "com.willowtreeapps.assertk:assertk-jvm:${versions.assertk}"
        testImplementation("io.mockk:mockk:${versions.mockk}") {
            exclude group: 'org.jetbrains.kotlin'
        }

        runtimeOnly "com.github.schnitker.logmanager:logmgr-logback:${versions.logmanager}"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit5}"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${versions.junit5}"

        integrationTestImplementation "org.testcontainers:testcontainers:${versions.testcontainers}"
        integrationTestImplementation "org.testcontainers:junit-jupiter:${versions.testcontainers}"
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    compileKotlin.kotlinOptions.jvmTarget = sourceCompatibility
    compileTestKotlin.kotlinOptions.jvmTarget = sourceCompatibility
    compileIntegrationTestKotlin.kotlinOptions.jvmTarget = sourceCompatibility
}

bintrayUpload {
    enabled = false
}